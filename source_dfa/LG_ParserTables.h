
////////////////////////////////////////////////////////////////////////////////
//
//    LG_ParserTables.h (generated by LRSTAR 23.0.008)

      #pragma once

      #undef  GRAMMAR
      #undef  PARSER
      #undef  PARSER_TABLES
      #undef  LEXER
      #undef  ACTIONS
      #undef  TERM_ACTIONS
      #undef  PARSE_ACTIONS
      #undef  NODE_ACTIONS
      #undef  INSENSITIVE
      #undef  LOOKAHEADS
      #undef  DEBUG_PARSER
      #undef  DEBUG_TRACE
      #undef  MAKE_AST
      #undef  EXPECTING
      #undef  REVERSABLE
      #undef  SEMANTICS
      #undef  ND_PARSING
      #undef  ND_THREADS
      #undef  CLR_PARSER
      #undef  LR_PARSER

      #define GRAMMAR      "LG"
      #define PARSER        LG_Parser
      #define PARSER_TABLES LG_ParserTables
      #define LEXER         LG_Lexer
      #define ACTIONS       LG_Actions
      #define TERM_ACTIONS  LG_TermActions
      #define PARSE_ACTIONS LG_ParseActions
      #define LOOKAHEADS    1
      #define EXPECTING
      #define LR_PARSER

      enum termcon
      {
         T_ERROR = 0,
         T_ALPHA = 2,
         T_LEXICAL = 3,
         T_IGNORE = 4,
         T_ESCAPE = 5,
         T_LITERAL = 6,
         T_INTEGER = 7,
         T_EOF = 1,
         T_ARROW = 8,
         T_LEFTP = 9,
         T_RIGHTP = 10,
         T_PLUS = 11,
         T_STAR = 12,
         T_QUEST = 13,
         T_DOTS = 14,
         T_BAR = 15,
         T_DASH = 16,
         T_SEMI = 17
      };

      typedef unsigned int   uint;
      typedef unsigned char  uchar;
      typedef unsigned short ushort;

      #define TOP_DOWN  0
      #define PASS_OVER 1
      #define BOTTOM_UP 2

      class LG_ParserTables
      {
         friend class LG_Parser;
         public:
         static char*  term_symb[    24]; // Terminal symbols of the grammar.
         static char*  head_symb[    36]; // Nonterminal symbols of the grammar.
         static char*  tact_name[     3]; // Terminal action names found in the grammar.
         static char*  pact_name[    32]; // Parse action names found in the grammar.
         static uchar  head_numb[    80]; // Head symbol number for a production.
         static uchar  f_tail   [    81]; // First tail in a production.
         static char   tail     [   143]; // Tail symbol number.
         static char   arga     [    24]; // Arguments for terminal actions.
         static char   argx     [    80]; // First arguments for productions.

         private:
         static uchar  Bm[    33]       ; // Boolean matrix.
         static uchar  Br[    40]       ; // Boolean matrix row.
         static uchar  Bc[    24]       ; // Boolean matrix column.
         static uchar  Bf[    24]       ; // Boolean matrix filter/mask.
         static char   Tm[    61]       ; // Terminal transition matrix.
         static uchar  Tr[    40]       ; // Terminal transition matrix row.
         static uchar  Tc[    24]       ; // Terminal transition matrix column.
         static char   Nm[   117]       ; // Nonterminal transition matrix.
         static uchar  Nr[    40]       ; // Nonterminal transition matrix row.
         static uchar  Nc[    80]       ; // Nonterminal transition matrix column.
         static uchar  Rm[    58]       ; // Reduction matrix.
         static char   Rr[    40]       ; // Reduction matrix row.
         static uchar  Rc[    24]       ; // Reduction matrix column.
         static char   PL[    80]       ; // Production length minus one.

         static char   tact_numb[    24]; // Terminal action numbers.
         static char   pact_numb[    80]; // Parse action numbers.

         static void   (*init_func[    2]) ()       ; // Init action function pointers.
         static int    (*tact_func[    3]) (int& t) ; // Terminal action function pointers.
         static int    (*pact_func[   32]) (int  p) ; // Parse action function pointers.
      };

//
////////////////////////////////////////////////////////////////////////////////

