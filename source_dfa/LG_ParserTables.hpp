
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    LG_ParserTables.hpp (generated by LRSTAR 23.0.008)

      #include "LG_ParserTables.h"
      #include "LG_Actions.h"

      static int n_terms      =   24; // Number of terminals.
      static int n_heads      =   36; // Number of nonterminals.
      static int n_prods      =   80; // Number of productions.
      static int n_states     =   40; // Number of states.
      static int accept_state =   39; // Accept state.
      static int n_termactns  =    3; // Number of terminal actions.
      static int n_parsactns  =   32; // Number of parse actions.
      static int n_nodenames  =    0; // Number of node names.
      static int n_nodeactns  =    0; // Number of node actions.
      static int eof_symb     =    1; // <eof> symbol number.
      static int err_used     =    0; // <error> used in grammar?

   // Terminal symbols of the grammar ...
      char* LG_ParserTables::term_symb[24] = 
      {
         "<error>",
         "<eof>",
         "<alpha>",
         "<lexical>",
         "<ignore>",
         "<escape>",
         "<literal>",
         "<integer>",
         "\'->\'",
         "\'(\'",
         "\')\'",
         "\'+\'",
         "\'*\'",
         "\'?\'",
         "\'..\'",
         "\'|\'",
         "\'-\'",
         "\';\'",
         "{alpha}",
         "{lexical}",
         "{ignore}",
         "{escape}",
         "{literal}",
         "\'=\'"
      };

   // Nonterminal symbols of the grammar ...
      char* LG_ParserTables::head_symb[36] = 
      {
         "Goal",
         "Grammar",
         "TokenProd",
         "Token",
         "ReturnValue",
         "NonterminalDef",
         "HeadSymbol",
         "ArrowProd",
         "Arrow",
         "TailExprList",
         "TailExpr",
         "List",
         "Or",
         "GroupStart",
         "GroupEnd",
         "TailSymbol",
         "SetDef",
         "AlphaSymbol",
         "Equals",
         "SetExpr",
         "Range",
         "RangeEnd",
         "RangeStart",
         "FCharacter",
         "FSetItem",
         "Character",
         "SetItem",
         "EscapeDef",
         "EscapeSymbol",
         "Number",
         "TokenProd+",
         "(NonterminalDef | SetDef | EscapeDef)",
         "(NonterminalDef | SetDef | EscapeDef)+",
         "ArrowProd+",
         "TailExpr+",
         "';'?"
      };

   // Terninal action names found in the grammar ...
      char* LG_ParserTables::tact_name[3] = 
      {
         "error",
         "first",
         "arrow"
      };

   // Parse action names found in the grammar ...
      char* LG_ParserTables::pact_name[32] = 
      {
         "ADD_TOKEN",
         "ADD_TOKEN2",
         "ADD_TERMNO",
         "ADD_DEFCON",
         "ADD_HEAD",
         "ADD_HEADLEX",
         "ADD_HEADIGNORE",
         "ADD_PROD",
         "POP_ALL",
         "PUSH_PLUS",
         "PUSH_ASTER",
         "PUSH_QUEST",
         "PUSH_OR",
         "PUSH_GBEG",
         "PUSH_GEND",
         "PUSH_GPLUS",
         "PUSH_GASTER",
         "PUSH_GQUEST",
         "PUSH_TAIL",
         "DEF_SET",
         "ADD_HEADSET",
         "FIRST_RANGE",
         "ADD_RANGE",
         "ADD_CHAR",
         "ADD_SET",
         "SUB_RANGE",
         "SUB_CHAR",
         "SUB_SET",
         "RANGE_END",
         "RANGE_START",
         "FIRST_CHAR",
         "FIRST_SET"
      };

   // Head symbol numbers for the productions ...
      uchar LG_ParserTables::head_numb[80] = 
      {
          0,    1,    2,    3,    3,    4,    4,    5,    6,    6,    6,    7,    8,    9,   10,   10,   10,   10,   10,   11,
         11,   11,   12,   13,   14,   14,   14,   14,   15,   15,   15,   15,   15,   16,   17,   18,   19,   19,   19,   19,
         19,   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,   20,   21,   22,   23,   24,
         25,   25,   26,   26,   27,   28,   29,   30,   30,   31,   31,   31,   32,   32,   33,   33,   34,   34,   35,   35
      };

   // First tail symbol index into the tail list ...
      uchar LG_ParserTables::f_tail[81] = 
      {
          0,    2,    4,    6,    7,    8,    9,   10,   12,   13,   14,   15,   17,   18,   19,   20,   22,   24,   26,   29,
         30,   32,   35,   36,   37,   38,   40,   42,   44,   45,   46,   47,   48,   49,   53,   54,   55,   56,   59,   62,
         65,   68,   71,   74,   77,   80,   83,   86,   89,   92,   95,   98,  101,  104,  107,  110,  113,  114,  115,  116,
        117,  118,  119,  120,  121,  125,  126,  127,  128,  130,  131,  132,  133,  134,  136,  137,  139,  140,  142,  142,
        143
      };

   // Tail symbol numbers ...
      char LG_ParserTables::tail[143] = 
      {
         -1,    1,  -30,  -32,   -3,   -4,   19,   22,    7,    2,   -6,  -33,   18,   19,   20,   -8,   -9,    8,  -34,  -15,
        -15,   11,  -15,   12,  -15,   13,  -13,  -11,  -14,  -10,  -11,  -10,  -11,  -12,  -10,   15,    9,   10,   10,   11,
         10,   12,   10,   13,    2,    5,    3,    6,    7,  -17,  -18,  -19,  -35,   18,   23,  -20,  -23,   15,  -20,  -23,
         15,  -25,  -23,   15,  -26,  -23,   16,  -20,  -23,   16,  -25,  -23,   16,  -26,  -24,   15,  -20,  -24,   15,  -25,
        -24,   15,  -26,  -24,   16,  -20,  -24,   16,  -25,  -24,   16,  -26,  -19,   15,  -20,  -19,   15,  -25,  -19,   15,
        -26,  -19,   16,  -20,  -19,   16,  -25,  -19,   16,  -26,  -22,   14,  -21,  -25,  -25,  -25,  -26,    6,    7,    2,
          5,  -28,  -18,  -29,  -35,   21,    7,   -2,  -30,   -2,   -5,  -16,  -27,  -31,  -32,  -31,   -7,  -33,   -7,  -10,
        -34,  -10,   17
      };

   // Arguments for token actions ...
      char LG_ParserTables::arga[24] = 
      {
         -1,   -1,   18,   19,   20,   21,   22,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1
      };

   // First arguments for productions ...
      char LG_ParserTables::argx[80] = 
      {
         -1,   -1,   -1,    0,    0,    0,    0,   -1,    0,    0,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,    0,    0,    0,    0,   -1,    0,   -1,    0,    2,    2,    2,
          2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   -1,    0,    0,    0,    0,
         -1,   -1,   -1,   -1,   -1,    0,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // Boolean matrix ...
      uchar LG_ParserTables::Bm[33] = 
      {
          0,    0,  128,    1,    2,    0,  192,    1,   68,    0,  192,  128,    0,    0,    2,  124,    0,  116,    0,   64,
          0,   56,    0,    4,    0,   24,    0,   32,  124,    9,   96,    0,    0
      };

   // Booeal matrix row (for state)...
      uchar LG_ParserTables::Br[40] = 
      {
          1,    4,    5,    8,    9,   11,   12,   12,    0,    0,   11,   15,   17,   19,   15,   13,   15,   20,   22,    0,
         24,   24,   26,   28,   17,   17,   30,   17,   17,   17,   17,   15,   13,    0,    0,    0,    0,    0,    0,    0
      };

   // Booolean matrix column (displacement) ...
      uchar LG_ParserTables::Bc[24] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    2,    2
      };

   // Boolean matrix filter/mask value ...
      uchar LG_ParserTables::Bf[24] = 
      {
          1,    2,    4,    8,    1,   16,   32,   64,  128,    8,    1,    2,    2,    2,    4,    8,   16,   32,   64,  128,
         64,   64,    1,    2
      };

   // Terminal transition matrix ...
      char LG_ParserTables::Tm[61] = 
      {
          0,    0,  -66,  -30,  -28,  -32,  -29,   32,    0,    0,  -31,  -22,    0,  -23,  -62,  -61,  -63,    0,    0,    0,
        -60,   29,   30,    0,   -9,  -10,  -65,    0,    8,   39,   -6,   -5,  -12,  -15,  -16,  -17,   26,   24,   25,  -79,
         -3,    0,    0,   -4,  -35,  -30,  -28,  -32,  -29,  -25,  -26,  -27,  -31,   27,   28,  -23,    9,  -10,  -65,   -4,
          8
      };

   // Terminal transition matrix row ...
      uchar LG_ParserTables::Tr[40] = 
      {
         29,   29,   45,   29,   13,   29,   29,   29,   29,   29,   29,   45,   13,    0,   45,   29,   45,   29,   29,   29,
         45,   13,   29,    3,   13,   13,   13,   13,   13,   13,   13,   45,   45,   29,   29,   29,   29,   29,   29,   29
      };

   // Terminal transition matrix column ...
      uchar LG_ParserTables::Tc[24] = 
      {
          0,    0,    1,    0,    1,    3,    7,    2,    3,   10,    4,    4,    5,    6,    7,    8,    9,   10,   15,   11,
         12,   13,   14,   15
      };

   // Nonterminal transition matrix ...
      char LG_ParserTables::Nm[117] = 
      {
          0,    0,    0,    0,    0,    0,    0,  -20,    0,   31,   16,  -18,   15,    0,  -40,    0,   18,    0,  -55,   36,
        -42,  -43,  -56,   18,    0,    0,   37,  -45,  -46,    0,   18,    0,  -21,   38,  -48,   16,    0,   15,    0,    0,
        -19,   23,  -37,   16,   18,   15,    0,   35,  -39,    0,  -52,    0,   18,    0,    0,   34,  -54,  -69,    5,  -75,
         11,  -77,    0,  -68,   16,    3,   15,  -70,    6,   13,    0,  -49,    0,   18,    0,    0,   33,  -51,  -71,    7,
          0,    0,  -72,    4,    0,    0,  -64,  -69,    5,  -74,   11,  -76,    1,  -67,   16,    3,   15,  -70,    6,   12,
         17,  -36,   -2,   18,   20,   21,   19,  -59,  -71,    7,   22,    2,  -73,  -11,   10,   14,  -33
      };

   // Nonterminal transition matrix row ...
      uchar LG_ParserTables::Nr[40] = 
      {
         87,   87,   57,   87,   87,   87,   87,   57,   87,   87,   57,   87,   87,   87,   57,   87,   36,   87,   87,   87,
         87,   87,   57,    3,   57,   36,    3,   28,    0,    7,   14,   28,   87,   87,   87,   87,   87,   87,   87,   87
      };

   // Nonterminal transition matrix column ...
      uchar LG_ParserTables::Nc[80] = 
      {
          5,    5,    6,    8,    8,   15,   15,    0,    1,    1,    1,    2,    3,   26,    4,    4,    4,    4,    4,    5,
          5,    5,    6,    7,    8,    8,    8,    8,    9,    9,    9,    9,    9,   10,   11,   12,   13,   13,   13,   13,
         13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   14,   15,   16,   17,   18,
         19,   19,   20,   20,   21,   22,   23,   24,   24,   25,   25,   25,   26,   26,   27,   27,   28,   28,   29,   29
      };

   // Reduction matrix ...
      uchar LG_ParserTables::Rm[58] = 
      {
          0,    0,    0,    0,    0,    0,    0,    8,    0,    0,   34,    0,    0,    3,    9,    0,    0,    0,    0,   57,
         58,    0,   50,    0,    0,   57,   50,    0,   53,    0,    0,   57,   53,    0,   38,    0,    0,   57,   38,    0,
         41,    0,    0,   57,   41,    0,   44,    0,    0,   57,   44,    0,   47,    0,    0,   57,   47,    0
      };

   // Reduction matrix row ...
      char LG_ParserTables::Rr[40] = 
      {
          0,    0,    0,    0,    1,    0,    0,    0,   -4,  -11,    7,    0,    0,    0,   13,   14,    0,   78,    0,  -15,
          0,    0,   78,    0,    0,    0,    0,    0,    0,    0,    0,    0,   24,  -21,  -27,  -33,  -39,  -45,  -51,    0
      };

   // Reduction matrix column ...
      uchar LG_ParserTables::Rc[24] = 
      {
          0,    1,    2,    0,    0,    0,    0,    2,    3,    0,    0,    0,    0,    0,    4,    5,    5,    1,    1,    1,
          1,    1,    0,    6
      };

   // Production lengths (minus one) ...
      char LG_ParserTables::PL[80] = 
      {
          1,    1,    1,    0,    0,    0,    0,    1,    0,    0,    0,    1,    0,    0,    0,    1,    1,    1,    2,    0,
          1,    2,    0,    0,    0,    1,    1,    1,    0,    0,    0,    0,    0,    3,    0,    0,    0,    2,    2,    2,
          2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0,    0,    0,    0,
          0,    0,    0,    0,    3,    0,    0,    0,    1,    0,    0,    0,    0,    1,    0,    1,    0,    1,   -1,    0
      };

   // Terminal action number ...
      char LG_ParserTables::tact_numb[24] = 
      {
          0,   -1,    1,    1,    1,    1,    1,   -1,    2,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1
      };

   // Parse action numbers ...
      char LG_ParserTables::pact_numb[80] = 
      {
         -1,   -1,   -1,    0,    1,    2,    3,   -1,    4,    5,    6,   -1,    7,    8,   -1,    9,   10,   11,   -1,   -1,
         -1,   -1,   12,   13,   14,   15,   16,   17,   18,   18,   18,   18,   18,   19,   20,    7,   21,   22,   23,   24,
         25,   26,   27,   22,   23,   24,   25,   26,   27,   22,   23,   24,   25,   26,   27,   -1,   28,   29,   30,   31,
         -1,   -1,   -1,   -1,   -1,   20,   30,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // Init action function pointers ...
      void (*LG_ParserTables::init_func[2]) () =
      {
         LG_Actions::init_actions,
         LG_Actions::term_actions
      };

   // Terminal action function pointers ...
      int (*LG_ParserTables::tact_func[3]) (int& t) =
      {
         LG_TermActions::error,
         LG_TermActions::first,
         LG_TermActions::arrow
      };

   // Parse action function pointers ...
      int (*LG_ParserTables::pact_func[32]) (int p) = 
      {
         LG_ParseActions::ADD_TOKEN,
         LG_ParseActions::ADD_TOKEN2,
         LG_ParseActions::ADD_TERMNO,
         LG_ParseActions::ADD_DEFCON,
         LG_ParseActions::ADD_HEAD,
         LG_ParseActions::ADD_HEADLEX,
         LG_ParseActions::ADD_HEADIGNORE,
         LG_ParseActions::ADD_PROD,
         LG_ParseActions::POP_ALL,
         LG_ParseActions::PUSH_PLUS,
         LG_ParseActions::PUSH_ASTER,
         LG_ParseActions::PUSH_QUEST,
         LG_ParseActions::PUSH_OR,
         LG_ParseActions::PUSH_GBEG,
         LG_ParseActions::PUSH_GEND,
         LG_ParseActions::PUSH_GPLUS,
         LG_ParseActions::PUSH_GASTER,
         LG_ParseActions::PUSH_GQUEST,
         LG_ParseActions::PUSH_TAIL,
         LG_ParseActions::DEF_SET,
         LG_ParseActions::ADD_HEADSET,
         LG_ParseActions::FIRST_RANGE,
         LG_ParseActions::ADD_RANGE,
         LG_ParseActions::ADD_CHAR,
         LG_ParseActions::ADD_SET,
         LG_ParseActions::SUB_RANGE,
         LG_ParseActions::SUB_CHAR,
         LG_ParseActions::SUB_SET,
         LG_ParseActions::RANGE_END,
         LG_ParseActions::RANGE_START,
         LG_ParseActions::FIRST_CHAR,
         LG_ParseActions::FIRST_SET
      };

//
////////////////////////////////////////////////////////////////////////////////////////////////////

