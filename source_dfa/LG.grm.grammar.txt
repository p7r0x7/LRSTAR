
/* LG grammar */

/* Terminal Symbols */

       T_ERROR                   <error>;
       T_EOF                     <eof>;
       T_ALPHA                   <alpha>;
       T_LEXICAL                 <lexical>;
       T_IGNORE                  <ignore>;
       T_ESCAPE                  <escape>;
       T_LITERAL                 <literal>;
       T_INTEGER                 <integer>;
       T_ARROW                   '->';
       T_LEFTP                   '(';
       T_RIGHTP                  ')';
       T_PLUS                    '+';
       T_STAR                    '*';
       T_QUEST                   '?';
       T_DOTS                    '..';
       T_BAR                     '|';
       T_DASH                    '-';
       T_SEMI                    ';';

    0  <error>
    1  <eof>
    2  <alpha>
    3  <lexical>
    4  <ignore>
    5  <escape>
    6  <literal>
    7  <integer>
    8  '->'
    9  '('
   10  ')'
   11  '+'
   12  '*'
   13  '?'
   14  '..'
   15  '|'
   16  '-'
   17  ';'
   18  {alpha}
   19  {lexical}
   20  {ignore}
   21  {escape}
   22  {literal}
   23  '='

/* Productions */

    0       Goal
        0      : Grammar <eof> 
               ;

    1       Grammar
        1      : TokenProd+ (NonterminalDef | SetDef | EscapeDef)+ 
               ;

    2       TokenProd
        2      : Token ReturnValue 
               ;

    3       Token
        3      : {lexical} 
        4      | {literal} 
               ;

    4       ReturnValue
        5      : <integer> 
        6      | <alpha> 
               ;

    5       NonterminalDef
        7      : HeadSymbol ArrowProd+ 
               ;

    6       HeadSymbol
        8      : {alpha} 
        9      | {lexical} 
       10      | {ignore} 
               ;

    7       ArrowProd
       11      : Arrow TailExprList 
               ;

    8       Arrow
       12      : '->' 
               ;

    9       TailExprList
       13      : TailExpr+ 
               ;

   10       TailExpr
       14      : TailSymbol 
       15      | TailSymbol '+' 
       16      | TailSymbol '*' 
       17      | TailSymbol '?' 
       18      | GroupStart List GroupEnd 
               ;

   11       List
       19      : TailExpr 
       20      | List TailExpr 
       21      | List Or TailExpr 
               ;

   12       Or
       22      : '|' 
               ;

   13       GroupStart
       23      : '(' 
               ;

   14       GroupEnd
       24      : ')' 
       25      | ')' '+' 
       26      | ')' '*' 
       27      | ')' '?' 
               ;

   15       TailSymbol
       28      : <alpha> 
       29      | <escape> 
       30      | <lexical> 
       31      | <literal> 
       32      | <integer> 
               ;

   16       SetDef
       33      : AlphaSymbol Equals SetExpr ';'? 
               ;

   17       AlphaSymbol
       34      : {alpha} 
               ;

   18       Equals
       35      : '=' 
               ;

   19       SetExpr
       36      : Range 
       37      | FCharacter '|' Range 
       38      | FCharacter '|' Character 
       39      | FCharacter '|' SetItem 
       40      | FCharacter '-' Range 
       41      | FCharacter '-' Character 
       42      | FCharacter '-' SetItem 
       43      | FSetItem '|' Range 
       44      | FSetItem '|' Character 
       45      | FSetItem '|' SetItem 
       46      | FSetItem '-' Range 
       47      | FSetItem '-' Character 
       48      | FSetItem '-' SetItem 
       49      | SetExpr '|' Range 
       50      | SetExpr '|' Character 
       51      | SetExpr '|' SetItem 
       52      | SetExpr '-' Range 
       53      | SetExpr '-' Character 
       54      | SetExpr '-' SetItem 
               ;

   20       Range
       55      : RangeStart '..' RangeEnd 
               ;

   21       RangeEnd
       56      : Character 
               ;

   22       RangeStart
       57      : Character 
               ;

   23       FCharacter
       58      : Character 
               ;

   24       FSetItem
       59      : SetItem 
               ;

   25       Character
       60      : <literal> 
       61      | <integer> 
               ;

   26       SetItem
       62      : <alpha> 
       63      | <escape> 
               ;

   27       EscapeDef
       64      : EscapeSymbol Equals Number ';'? 
               ;

   28       EscapeSymbol
       65      : {escape} 
               ;

   29       Number
       66      : <integer> 
               ;

   30       TokenProd+
       67      : TokenProd 
       68      | TokenProd+ TokenProd 
               ;

   31       (NonterminalDef | SetDef | EscapeDef)
       69      : NonterminalDef 
       70      | SetDef 
       71      | EscapeDef 
               ;

   32       (NonterminalDef | SetDef | EscapeDef)+
       72      : (NonterminalDef | SetDef | EscapeDef) 
       73      | (NonterminalDef | SetDef | EscapeDef)+ (NonterminalDef | SetDef | EscapeDef) 
               ;

   33       ArrowProd+
       74      : ArrowProd 
       75      | ArrowProd+ ArrowProd 
               ;

   34       TailExpr+
       76      : TailExpr 
       77      | TailExpr+ TailExpr 
               ;

   35       ';'?
       78      : 
       79      | ';' 
               ;

/* End of LG grammar 

