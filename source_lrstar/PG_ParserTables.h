
////////////////////////////////////////////////////////////////////////////////
//
//    PG_ParserTables.h (generated by LRSTAR 23.0.008)

      #pragma once

      #undef  GRAMMAR
      #undef  PARSER
      #undef  PARSER_TABLES
      #undef  LEXER
      #undef  ACTIONS
      #undef  TERM_ACTIONS
      #undef  PARSE_ACTIONS
      #undef  NODE_ACTIONS
      #undef  INSENSITIVE
      #undef  LOOKAHEADS
      #undef  DEBUG_PARSER
      #undef  DEBUG_TRACE
      #undef  MAKE_AST
      #undef  EXPECTING
      #undef  REVERSABLE
      #undef  SEMANTICS
      #undef  ND_PARSING
      #undef  ND_THREADS
      #undef  CLR_PARSER
      #undef  LR_PARSER

      #define GRAMMAR      "PG"
      #define PARSER        PG_Parser
      #define PARSER_TABLES PG_ParserTables
      #define LEXER         PG_Lexer
      #define ACTIONS       PG_Actions
      #define TERM_ACTIONS  PG_TermActions
      #define PARSE_ACTIONS PG_ParseActions
      #define NODE_ACTIONS  PG_NodeActions
      #define LOOKAHEADS    1
      #define MAKE_AST
      #define EXPECTING
      #define LR_PARSER

      enum termcon
      {
         ERRORSYMBOL = 0,
         EOFSYMBOL = 1,
         GOALSYMBOL = 2,
         HEADSYMBOL = 3,
         ALPHA = 4,
         LEXICAL = 5,
         LITERAL = 6,
         SEMANTIC = 7,
         INTEGERX = 8,
         STRINGX = 9,
         EOFLITERAL = 10,
         ARROW = 11,
         COLON = 12,
         BAR = 13,
         SEMI = 14,
         ACTION = 15
      };

      enum nodecon
      {
         N_start_ = 0,
         N_declarations_ = 1,
         N_terminal_decl_ = 2,
         N_defcon_ = 3,
         N_terminal_ = 4,
         N_operprec_ = 5,
         N_leftassoc_ = 6,
         N_rightassoc_ = 7,
         N_oper_ = 8,
         N_rules_ = 9,
         N_goaldef_ = 10,
         N_prod_ = 11,
         N_tail_list_ = 12,
         N_tail_ = 13,
         N_tail_eof_ = 14,
         N_headdef_ = 15,
         N_priority_ = 16,
         N_repeat_one_or_more_ = 17,
         N_repeat_zero_or_more_ = 18,
         N_repeat_zero_or_one_ = 19,
         N_group_ = 20,
         N_optgroup_ = 21,
         N_sepgroup_ = 22,
         N_section_ = 23,
         N_semargs_ = 24,
         N_arg_semantic_ = 25,
         N_arg_terminal_ = 26,
         N_sep_ = 27,
         N_terminal_action_ = 28,
         N_ta_name_ = 29,
         N_rule_actions_ = 30,
         N_node_name_ = 31,
         N_node_action_ = 32,
         N_reverse_ = 33,
         N_targs_ = 34,
         N_pargs_ = 35,
         N_arg_integer_ = 36,
         N_arg_alpha_ = 37
      };

      typedef unsigned int   uint;
      typedef unsigned char  uchar;
      typedef unsigned short ushort;

      #define TOP_DOWN  0
      #define PASS_OVER 1
      #define BOTTOM_UP 2

      class PG_ParserTables
      {
         friend class PG_Parser;
         public:
         static char*  term_symb[    34]; // Terminal symbols of the grammar.
         static char*  head_symb[    64]; // Nonterminal symbols of the grammar.
         static char*  tact_name[     8]; // Terminal action names found in the grammar.
         static char*  pact_name[    20]; // Parse action names found in the grammar.
         static char*  node_name[    38]; // Node names found in the grammar.
         static uchar  head_numb[   141]; // Head symbol number for a production.
         static ushort f_tail   [   142]; // First tail in a production.
         static char   tail     [   257]; // Tail symbol number.
         static char   arga     [    34]; // Arguments for terminal actions.
         static char   argx     [   141]; // First arguments for productions.

         private:
         static uchar  Bm[   108]       ; // Boolean matrix.
         static uchar  Br[    86]       ; // Boolean matrix row.
         static uchar  Bc[    34]       ; // Boolean matrix column.
         static uchar  Bf[    34]       ; // Boolean matrix filter/mask.
         static char   Tm[   161]       ; // Terminal transition matrix.
         static uchar  Tr[    86]       ; // Terminal transition matrix row.
         static uchar  Tc[    34]       ; // Terminal transition matrix column.
         static short  Nm[   307]       ; // Nonterminal transition matrix.
         static ushort Nr[    86]       ; // Nonterminal transition matrix row.
         static uchar  Nc[   141]       ; // Nonterminal transition matrix column.
         static uchar  Rm[    25]       ; // Reduction matrix.
         static short  Rr[    86]       ; // Reduction matrix row.
         static uchar  Rc[    34]       ; // Reduction matrix column.
         static char   PL[   141]       ; // Production length minus one.

         static char   tact_numb[    34]; // Terminal action numbers.
         static char   pact_numb[   141]; // Parse action numbers.
         static char   node_numb[   141]; // Node numbers for the productions.
         static char   nact_numb[   141]; // Node action numbers for the productions.

         static void   (*init_func[    2]) ()       ; // Init action function pointers.
         static int    (*tact_func[    8]) (int& t) ; // Terminal action function pointers.
         static int    (*pact_func[   20]) (int  p) ; // Parse action function pointers.
         static int    (*nact_func[   38]) (void* v); // Node action function pointers.
      };

//
////////////////////////////////////////////////////////////////////////////////

