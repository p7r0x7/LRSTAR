
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    PG_ParserTables.hpp (generated by LRSTAR 23.0.008)

      #include "PG_ParserTables.h"
      #include "PG_Actions.h"

      static int n_terms      =   34; // Number of terminals.
      static int n_heads      =   64; // Number of nonterminals.
      static int n_prods      =  141; // Number of productions.
      static int n_states     =   86; // Number of states.
      static int accept_state =   85; // Accept state.
      static int n_termactns  =    8; // Number of terminal actions.
      static int n_parsactns  =   20; // Number of parse actions.
      static int n_nodenames  =   38; // Number of node names.
      static int n_nodeactns  =   38; // Number of node actions.
      static int eof_symb     =    1; // <eof> symbol number.
      static int err_used     =    0; // <error> used in grammar?

   // Terminal symbols of the grammar ...
      char* PG_ParserTables::term_symb[34] = 
      {
         "<error>",
         "<eof>",
         "{goalsymbol}",
         "{headsymbol}",
         "<alpha>",
         "<lexical>",
         "<literal>",
         "<semantic>",
         "<integer>",
         "<string>",
         "\'<eof>\'",
         "\'->\'",
         "\':\'",
         "\'|\'",
         "\';\'",
         "\'=>\'",
         "\'+>\'",
         "\'*>\'",
         "\'(\'",
         "\')\'",
         "\'{\'",
         "\'}\'",
         "\'[\'",
         "\']\'",
         "\'<<\'",
         "\'>>\'",
         "\'+\'",
         "\'*\'",
         "\'?\'",
         "\'/\'",
         "\'...\'",
         "\'~\'",
         "\'^\'",
         "\'#\'"
      };

   // Nonterminal symbols of the grammar ...
      char* PG_ParserTables::head_symb[64] = 
      {
         "Goal",
         "Grammar",
         "Declarations",
         "TerminalDecl",
         "DefCon",
         "Terminal",
         "OperPrec",
         "OperPrecLine",
         "Operator",
         "Rules",
         "GoalSymbolDef",
         "GoalSymbol",
         "GoalSymbolRule",
         "GoalExprList",
         "EOFTailExpr",
         "EOFTail",
         "NonterminalDef",
         "HeadSymbol",
         "ColonFirst",
         "ArrowFirst",
         "BarRules",
         "BarRule",
         "ArrowRules",
         "ArrowRule",
         "TailList",
         "SemTail",
         "TailUpgrade",
         "TailExpr",
         "ComplexTail",
         "Group",
         "OptGroup",
         "SepGroup",
         "ComplexSection",
         "SimpleSection",
         "SepExpr",
         "TailUpgrade2",
         "LexVar",
         "SemVar",
         "Tail",
         "Sep",
         "TerminalAction",
         "TAName",
         "RuleAction",
         "NodeName",
         "NodeNameWA",
         "NodeAction",
         "Rev",
         "TArgs",
         "PArgs",
         "FirstArg",
         "ArgNum",
         "ArgVar",
         "TerminalDecl+",
         "OperPrecLine+",
         "Operator+",
         "NonterminalDef*",
         "BarRule+",
         "ArrowRule+",
         "TailExpr+",
         "ComplexSection/'|'+",
         "SimpleSection/'|'+",
         "(Tail | ComplexTail)",
         "(Tail | ComplexTail)+",
         "Tail+"
      };

   // Terninal action names found in the grammar ...
      char* PG_ParserTables::tact_name[8] = 
      {
         "error",
         "headsymbol",
         "poslookup",
         "arrow",
         "colon",
         "bar",
         "semi",
         "position"
      };

   // Parse action names found in the grammar ...
      char* PG_ParserTables::pact_name[20] = 
      {
         "terminal_decl_",
         "defcon_",
         "terminal_",
         "oper_",
         "goalsymbol_",
         "prod_",
         "tail_expr_",
         "tail_",
         "tail_eof_",
         "headsymbol_",
         "priority_",
         "arg_semantic_",
         "arg_terminal_",
         "sep_",
         "ta_name_",
         "node_name_",
         "node_action_",
         "arg_first_",
         "arg_integer_",
         "arg_alpha_"
      };

   // Node names found in the grammar ...
      char* PG_ParserTables::node_name[38] = 
      {
         "start_",
         "declarations_",
         "terminal_decl_",
         "defcon_",
         "terminal_",
         "operprec_",
         "leftassoc_",
         "rightassoc_",
         "oper_",
         "rules_",
         "goaldef_",
         "prod_",
         "tail_list_",
         "tail_",
         "tail_eof_",
         "headdef_",
         "priority_",
         "repeat_one_or_more_",
         "repeat_zero_or_more_",
         "repeat_zero_or_one_",
         "group_",
         "optgroup_",
         "sepgroup_",
         "section_",
         "semargs_",
         "arg_semantic_",
         "arg_terminal_",
         "sep_",
         "terminal_action_",
         "ta_name_",
         "rule_actions_",
         "node_name_",
         "node_action_",
         "reverse_",
         "targs_",
         "pargs_",
         "arg_integer_",
         "arg_alpha_"
      };

   // Head symbol numbers for the productions ...
      uchar PG_ParserTables::head_numb[141] = 
      {
          0,    1,    2,    2,    3,    3,    3,    3,    4,    5,    5,    5,    5,    5,    6,    6,    7,    7,    8,    8,
          8,    8,    9,   10,   11,   12,   12,   13,   14,   15,   15,   16,   16,   16,   16,   17,   18,   18,   19,   19,
         20,   21,   21,   21,   22,   23,   23,   23,   24,   24,   25,   26,   27,   27,   28,   28,   28,   28,   28,   28,
         28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   29,   30,   31,   32,   33,   34,
         34,   35,   36,   36,   37,   37,   38,   38,   38,   38,   39,   39,   39,   39,   40,   41,   42,   42,   42,   43,
         44,   45,   46,   46,   47,   47,   47,   48,   48,   48,   49,   50,   51,   51,   51,   51,   51,   52,   52,   53,
         53,   54,   54,   55,   55,   56,   56,   57,   57,   58,   58,   59,   59,   60,   60,   61,   61,   62,   62,   63,
         63
      };

   // First tail symbol index into the tail list ...
      ushort PG_ParserTables::f_tail[142] = 
      {
          0,    2,    5,    5,    6,    9,   13,   15,   18,   19,   20,   21,   22,   23,   24,   24,   25,   29,   33,   34,
         35,   36,   37,   39,   41,   42,   46,   49,   51,   52,   53,   54,   57,   61,   63,   66,   67,   70,   73,   76,
         79,   80,   83,   87,   90,   91,   94,   98,  101,  101,  102,  103,  104,  105,  106,  108,  110,  112,  114,  118,
        122,  126,  127,  129,  131,  133,  135,  139,  143,  147,  148,  150,  152,  156,  160,  163,  166,  169,  170,  171,
        172,  173,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  190,  192,  192,  196,  200,
        201,  202,  203,  203,  204,  204,  206,  209,  209,  211,  214,  215,  216,  217,  218,  219,  220,  221,  222,  224,
        225,  227,  228,  230,  230,  232,  233,  235,  236,  238,  239,  241,  242,  245,  246,  249,  250,  251,  252,  254,
        255,  257
      };

   // Tail symbol numbers ...
      char PG_ParserTables::tail[257] = 
      {
         -1,    1,   -2,   -6,   -9,  -52,   -4,   -5,   14,   -4,   -5,  -40,   14,   -5,   14,   -5,  -40,   14,    4,    4,
          5,    6,    7,   10,  -53,   20,  -54,   21,   24,   20,  -54,   21,   25,    4,    5,    7,    6,  -10,  -55,  -11,
        -12,    2,   12,  -13,  -42,   14,   11,  -13,  -42,  -27,  -14,  -15,   10,    4,  -17,  -18,   14,  -17,  -18,  -20,
         14,  -17,  -19,  -17,  -19,  -22,    3,   12,  -24,  -42,   12,  -25,  -42,   11,  -24,  -42,   11,  -25,  -42,  -56,
         13,  -24,  -42,   33,   13,  -24,  -42,   13,  -25,  -42,  -57,   11,  -24,  -42,   33,   11,  -24,  -42,   11,  -25,
        -42,  -58,  -26,  -35,  -38,  -28,  -38,   26,  -38,   30,  -38,   27,  -38,   28,  -38,   29,  -34,   26,  -38,   29,
        -34,   30,  -38,   29,  -34,   27,  -29,  -29,   26,  -29,   30,  -29,   27,  -29,   28,  -29,   29,  -34,   26,  -29,
         29,  -34,   30,  -29,   29,  -34,   27,  -30,  -30,   26,  -30,   30,  -30,   29,  -34,   26,  -30,   29,  -34,   30,
         18,  -59,   19,   22,  -59,   23,   18,  -60,   19,  -62,  -63,  -39,  -31,  -36,   32,  -37,    4,    5,    4,    7,
          4,    5,    6,    7,    4,    5,    6,    7,   15,  -41,    4,  -47,   16,  -43,  -48,  -46,   17,  -44,  -48,  -46,
          4,  -45,    4,   31,   18,   19,   18,  -51,   19,   18,   19,   18,  -49,   19,  -50,    8,    4,    5,    6,    7,
         10,   -3,  -52,   -3,   -7,  -53,   -7,   -8,  -54,   -8,  -55,  -16,  -21,  -56,  -21,  -23,  -57,  -23,  -27,  -58,
        -27,  -32,  -59,   13,  -32,  -33,  -60,   13,  -33,  -38,  -28,  -61,  -62,  -61,  -38,  -63,  -38
      };

   // Arguments for token actions ...
      char PG_ParserTables::arga[34] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // First arguments for productions ...
      char PG_ParserTables::argx[141] = 
      {
         -1,   -1,   -1,   -1,    0,    0,   -1,   -1,    0,    0,    0,    0,    0,    0,   -1,   -1,   -1,   -1,    0,    0,
          0,    0,   -1,    0,    0,    0,    0,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         -1,    0,    1,    0,   -1,    0,    1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   -1,    0,   -1,   -1,   -1,    0,
          0,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,    0,    0,    0,    0,    0,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1
      };

   // Boolean matrix ...
      uchar PG_ParserTables::Bm[108] = 
      {
          0,    0,    0,    0,  112,    1,    0,    0,    2,    0,    0,    0,   48,    0,    0,    4,    0,    0,    0,  112,
          0,    0,    0,   16,    0,    0,    0,    6,    0,    0,  112,    0,    4,    0,  128,    0,    0,    8,    0,    0,
          0,  112,  128,    8,    0,    0,   32,    0,  112,    1,    1,    0,   64,    0,    0,   16,    1,    0,    0,  192,
          3,    0,    0,   64,    2,    0,    0,    1,    0,   24,    0,   16,    0,    2,    0,  112,  128,    0,    0,    8,
          1,    0,    8,   16,    0,    8,    0,   16,    0,    0,    0,    8,    0,    0,  192,    0,    0,   64,    0,   80,
          0,    0,    0,    4,  128,    0,    1,    0
      };

   // Booeal matrix row (for state)...
      uchar PG_ParserTables::Br[86] = 
      {
          4,    8,    6,    4,    4,   11,    0,   15,    6,   19,   11,   22,   23,    0,   26,   30,   22,   33,   37,   41,
         41,   44,   48,   26,   51,   55,   57,   57,   61,   41,   41,   51,   65,   68,   72,   41,   41,   22,   23,   23,
         75,   75,   75,   78,   41,   57,   81,   22,   84,   41,   36,   72,   41,    7,   51,   41,   51,   88,    0,    0,
         51,   51,   33,   33,   92,   19,   92,   95,   41,   51,   51,   41,   51,   51,   41,   99,  100,  104,  100,   78,
         19,   51,   51,   65,   19,    0
      };

   // Booolean matrix column (displacement) ...
      uchar PG_ParserTables::Bc[34] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
          2,    2,    2,    2,    2,    2,    2,    2,    3,    3,    2,    3,    3,    3
      };

   // Boolean matrix filter/mask value ...
      uchar PG_ParserTables::Bf[34] = 
      {
          1,    2,    4,    8,   16,   32,   32,   64,  128,    1,    1,    2,    4,    8,   16,   32,   64,   64,  128,    1,
          2,    4,    8,   16,   32,   32,   64,  128,    1,    2,   64,    4,    8,   16
      };

   // Terminal transition matrix ...
      char PG_ParserTables::Tm[161] = 
      {
        -99, -101,  -84,  -30,    0,  -85,    0,  -29,    0,    0,   84,  -32,  -90,  -91,  -92,  -93,  -76,   58,   59,  -88,
        -89,    0,    0,   17,   65,    0,    0,    0,   74,   29,   49,   -5,    0,   30,    0,    0, -109,    0, -112, -113,
       -114, -115, -116,  -58,  -60,    0,  -25,  -59,    0,    0,   50, -105,  -86,  -87,  -88,  -89,    0,    0,  -72,   49,
        -31,    0,  -73,    0,   29,    0,    0,    0,   30,    0,    0,    0,  -66,  -68,    0,    0,  -67,    0,    0,   50,
        -18,  -19,  -21,  -20,    0,   52,    0,   71,   -7,    0,    0,    0,    0, -108,    0,   21, -111,    0,    0,    0,
        -70,    0,    0,   42,  -71,    0,    0,   53,   -9,  -10,  -11,  -12,  -13,   36,   35,   68,   -4,   12,    0,    0,
         77,  -74,    0,    0,    0,    0,    0,    0,  -62,  -64,  -65,   41,  -63,    6,  -10,  -11,  -12,  -13,   20,   19,
         68,   -6,   12,   38,   39,   22, -106,    9,  -35,   85,  -75,  -16,  -17,  -54,  -56,  -57,   40,  -55, -103,   75,
        -24
      };

   // Terminal transition matrix row ...
      uchar PG_ParserTables::Tr[86] = 
      {
        133,  133,  133,  133,  108,  133,  133,  133,  133,   80,  108,   80,   23,  133,  133,   80,   23,  133,  133,   52,
         52,  133,   38,  108,  133,    3,  133,  108,   80,   52,   52,  133,  133,   52,   80,   17,   17,   38,    0,    1,
         12,   12,   12,  108,   52,  133,  133,    3,   23,   17,   80,   80,   17,   23,  133,   52,  133,  133,  133,  133,
        133,  133,  108,  108,   23,   52,   52,   38,   52,  133,  133,   52,  133,  133,   52,    2,  133,   80,  133,    3,
         52,  133,  133,   23,   52,  133
      };

   // Terminal transition matrix column ...
      uchar PG_ParserTables::Tc[34] = 
      {
         16,   16,   27,   15,    0,    1,    2,    3,   16,   27,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
         14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27
      };

   // Nonterminal transition matrix ...
      short PG_ParserTables::Nm[307] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       -134, -133,    0,    0, -140, -139, -139, -136,   27,   28,  -42, -130,  -53,   27,   28,    0,    0,   45,    0,    0,
          0,  -41,   26,    0,    0,    0,  -47,    0,   79,   81,   80,   80, -129,  -53,   27,   28,    0,    0,    0,    0,
       -138,   82,    0,   26, -129,  -53,   27,   28, -136,   27,   28,    0, -132,    0,    0,   26,    0,    0,   45,    0,
          0,    0,  -46,   55, -136,   27,   28,    0, -131,    0,    0,    0,    0,    0,   45,   55,    0,    0,  -37,    0,
          0, -137,   44,    0,    0,    0,    0,    0,   54,   56,  -50, -129,  -53,   27,   28,   46,    0, -137,   44,  -51,
         57,    0,   26,    0,    0,    0,  -38,   60,   61,  -50, -129,  -53,   27,   28,    0,    0,    0,    0,  -51,   57,
          0,   26,   55,    0,    0,  -39,   69,   70,  -50, -129,  -53,   27,   28,    0,    0,    0,    0,  -51,   57,    0,
         26,   55,    0,    0,  -43,   72,   73,  -50, -129,  -53,   27,   28,    0,    0,    0,    0,  -51,   57,    0,   26,
         55,    0,    0,  -45, -136,   27,   28,  -80, -131,   10,   67,    0,    0,    0,   45,  -79,    0,    0,  -36,   55,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -126,   43, -128, -137,   44, -118,
         25,  -53,   27,   28,  -80,    4,    5,   66,    0, -120,    0,   26,  -79,   16,    0,  -26,    0,    0,    0,  -98,
          0,   78,    0,    0,    0,    0,    0,    0,    0,    0,    0, -122,    0,    0,    0,    0,   31,  -27,  -28, -124,
         23,   33,   34,   47, -125,  -34, -127,    1,    2, -117,   25,  -53,   27,   28,  -80,    4,    5,   64,    7, -119,
        -81,   26,  -79,   11,  -94,   37,   62,   63, -100,  -97,  -95,   76,   83, -110,   32,    3,    8,   15,   18,   48,
         51, -121,   -1,   13,   14,  -23,   24
      };

   // Nonterminal transition matrix row ...
      ushort PG_ParserTables::Nr[86] = 
      {
        257,  257,  257,  207,  170,  257,  257,  257,  207,  257,  207,  257,  257,  257,  257,  207,  257,  257,  257,  257,
        207,  257,  257,  257,  257,  257,  257,  257,  257,  170,   70,  207,  257,  257,  257,   98,  117,  257,  257,  257,
        257,  207,  170,  257,   13,  257,  257,  257,  207,  136,  257,  207,  155,  257,  170,   18,   70,  257,  257,  257,
         98,  117,  257,  207,  257,    2,  257,  257,   54,   13,  136,   39,  155,   18,   51,  257,  257,  257,  207,  257,
          0,    2,   54,  257,    1,  257
      };

   // Nonterminal transition matrix column ...
      uchar PG_ParserTables::Nc[141] = 
      {
         10,   10,   11,   11,   12,   12,   12,   12,   18,   19,   19,   19,   19,   19,   21,   21,   22,   22,   44,   44,
         44,   44,   45,   46,   47,   48,   48,   49,    0,    1,    1,    2,    2,    2,    2,    3,    4,    4,    5,    5,
          6,    7,    7,    7,    8,    9,    9,    9,   10,   10,   11,   12,   13,   13,   14,   14,   14,   14,   14,   14,
         14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   15,   16,   17,   18,   19,   20,
         20,   21,   22,   22,   23,   23,   24,   24,   24,   24,   25,   25,   25,   25,   26,   27,   28,   28,   28,   29,
         30,   31,   32,   32,   33,   33,   33,   34,   34,   34,   35,   36,   37,   37,   37,   37,   37,   38,   38,   39,
         39,   40,   40,   41,   41,   42,   42,   43,   43,   44,   44,   45,   45,   46,   46,   47,   47,   48,   48,   49,
         49
      };

   // Reduction matrix ...
      uchar PG_ParserTables::Rm[25] = 
      {
          0,    0,    0,    0,    0,    0,    0,    8,    8,    9,    9,    0,   86,   86,    0,   86,    0,   82,    0,   87,
         87,    0,   87,    0,   83
      };

   // Reduction matrix row ...
      short PG_ParserTables::Rr[86] = 
      {
          2,    0,   14,    3,    0,    0,   -5,    0,   15,    0,    0,    0,    0,  123,    0,    0,    0,  104,   22,    0,
          0,    0,    0,    0,   96,    0,   52,   61,   69,    0,    0,   96,    0,    0,   33,   48,   48,    0,    0,    0,
          0,    0,    0,    0,   77,  135,    0,    0,   40,   48,    0,   44,   48,    0,   96,   49,   96,    0,  -11,  -18,
         96,   96,  107,  107,    0,    0,    0,    0,    0,   96,   96,   48,   96,   96,   48,    0,  102,    0,  102,    0,
         78,   96,   96,    0,    0,    0
      };

   // Reduction matrix column ...
      uchar PG_ParserTables::Rc[34] = 
      {
          0,    1,    0,    1,    2,    2,    2,    2,    0,    0,    3,    1,    0,    1,    4,    5,    1,    1,    1,    0,
          0,    0,    1,    0,    0,    0,    1,    1,    1,    1,    1,    0,    6,    1
      };

   // Production lengths (minus one) ...
      char PG_ParserTables::PL[141] = 
      {
          1,    2,   -1,    0,    2,    3,    1,    2,    0,    0,    0,    0,    0,    0,   -1,    0,    3,    3,    0,    0,
          0,    0,    1,    1,    0,    3,    2,    1,    0,    0,    0,    2,    3,    1,    2,    0,    2,    2,    2,    2,
          0,    2,    3,    2,    0,    2,    3,    2,   -1,    0,    0,    0,    0,    0,    1,    1,    1,    1,    3,    3,
          3,    0,    1,    1,    1,    1,    3,    3,    3,    0,    1,    1,    3,    3,    2,    2,    2,    0,    0,    0,
          0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,   -1,    3,    3,    0,
          0,    0,   -1,    0,   -1,    1,    2,   -1,    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
          1,    0,    1,   -1,    1,    0,    1,    0,    1,    0,    1,    0,    2,    0,    2,    0,    0,    0,    1,    0,
          1
      };

   // Terminal action number ...
      char PG_ParserTables::tact_numb[34] = 
      {
          0,   -1,   -1,   -1,    1,    2,    2,    2,    2,    2,    2,    3,    4,    5,    6,    7,    7,    7,    7,    7,
          7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,   -1
      };

   // Parse action numbers ...
      char PG_ParserTables::pact_numb[141] = 
      {
         -1,   -1,   -1,   -1,    0,    0,   -1,   -1,    1,    2,    2,    2,    2,    2,   -1,   -1,   -1,   -1,    3,    3,
          3,    3,   -1,   -1,    4,    5,    5,   -1,    6,    7,    8,   -1,   -1,   -1,   -1,    9,    5,    5,    5,    5,
         -1,    5,   10,    5,   -1,    5,   10,    5,   -1,   -1,   -1,    6,    6,    6,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,    7,    7,   11,   12,    7,    7,    7,    7,   13,   13,   13,   13,   -1,   14,   -1,   -1,   -1,   15,
         15,   16,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   17,   18,   19,   12,   12,   12,   12,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1
      };

   // Node number for each production ...
      char PG_ParserTables::node_numb[141] = 
      {
          0,   -1,    1,    1,    2,    2,    2,    2,    3,    4,    4,    4,    4,    4,    5,    5,    6,    7,    8,    8,
          8,    8,    9,   10,   -1,   11,   11,   12,   -1,   13,   14,   15,   15,   15,   15,   -1,   11,   11,   11,   11,
         -1,   11,   16,   11,   -1,   11,   16,   11,   12,   12,   12,   -1,   -1,   -1,   17,   17,   18,   19,   17,   17,
         18,   -1,   17,   17,   18,   19,   17,   17,   18,   -1,   18,   18,   18,   18,   20,   21,   22,   23,   23,   -1,
         -1,   24,   13,   13,   25,   26,   13,   13,   13,   13,   27,   27,   27,   27,   28,   29,   -1,   30,   30,   31,
         31,   32,   -1,   33,   34,   34,   34,   35,   35,   35,   -1,   36,   37,   26,   26,   26,   26,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1
      };

   // Node action numbers ...
      char PG_ParserTables::nact_numb[141] = 
      {
          0,   -1,    1,    1,    2,    2,    2,    2,    3,    4,    4,    4,    4,    4,    5,    5,    6,    7,    8,    8,
          8,    8,    9,   10,   -1,   11,   11,   12,   -1,   13,   14,   15,   15,   15,   15,   -1,   11,   11,   11,   11,
         -1,   11,   16,   11,   -1,   11,   16,   11,   12,   12,   12,   -1,   -1,   -1,   17,   17,   18,   19,   17,   17,
         18,   -1,   17,   17,   18,   19,   17,   17,   18,   -1,   18,   18,   18,   18,   20,   21,   22,   23,   23,   -1,
         -1,   24,   13,   13,   25,   26,   13,   13,   13,   13,   27,   27,   27,   27,   28,   29,   -1,   30,   30,   31,
         31,   32,   -1,   33,   34,   34,   34,   35,   35,   35,   -1,   36,   37,   26,   26,   26,   26,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1
      };

   // Init action function pointers ...
      void (*PG_ParserTables::init_func[2]) () =
      {
         PG_Actions::init_actions,
         PG_Actions::term_actions
      };

   // Terminal action function pointers ...
      int (*PG_ParserTables::tact_func[8]) (int& t) =
      {
         PG_TermActions::error,
         PG_TermActions::headsymbol,
         PG_TermActions::poslookup,
         PG_TermActions::arrow,
         PG_TermActions::colon,
         PG_TermActions::bar,
         PG_TermActions::semi,
         PG_TermActions::position
      };

   // Parse action function pointers ...
      int (*PG_ParserTables::pact_func[20]) (int p) = 
      {
         PG_ParseActions::terminal_decl_,
         PG_ParseActions::defcon_,
         PG_ParseActions::terminal_,
         PG_ParseActions::oper_,
         PG_ParseActions::goalsymbol_,
         PG_ParseActions::prod_,
         PG_ParseActions::tail_expr_,
         PG_ParseActions::tail_,
         PG_ParseActions::tail_eof_,
         PG_ParseActions::headsymbol_,
         PG_ParseActions::priority_,
         PG_ParseActions::arg_semantic_,
         PG_ParseActions::arg_terminal_,
         PG_ParseActions::sep_,
         PG_ParseActions::ta_name_,
         PG_ParseActions::node_name_,
         PG_ParseActions::node_action_,
         PG_ParseActions::arg_first_,
         PG_ParseActions::arg_integer_,
         PG_ParseActions::arg_alpha_
      };

   // Node action function pointers ...
      int (*PG_ParserTables::nact_func[38]) (void* v) = 
      {
         PG_NodeActions::start_,
         PG_NodeActions::declarations_,
         PG_NodeActions::terminal_decl_,
         PG_NodeActions::defcon_,
         PG_NodeActions::terminal_,
         PG_NodeActions::operprec_,
         PG_NodeActions::leftassoc_,
         PG_NodeActions::rightassoc_,
         PG_NodeActions::oper_,
         PG_NodeActions::rules_,
         PG_NodeActions::goaldef_,
         PG_NodeActions::prod_,
         PG_NodeActions::tail_list_,
         PG_NodeActions::tail_,
         PG_NodeActions::tail_eof_,
         PG_NodeActions::headdef_,
         PG_NodeActions::priority_,
         PG_NodeActions::repeat_one_or_more_,
         PG_NodeActions::repeat_zero_or_more_,
         PG_NodeActions::repeat_zero_or_one_,
         PG_NodeActions::group_,
         PG_NodeActions::optgroup_,
         PG_NodeActions::sepgroup_,
         PG_NodeActions::section_,
         PG_NodeActions::semargs_,
         PG_NodeActions::arg_semantic_,
         PG_NodeActions::arg_terminal_,
         PG_NodeActions::sep_,
         PG_NodeActions::terminal_action_,
         PG_NodeActions::ta_name_,
         PG_NodeActions::rule_actions_,
         PG_NodeActions::node_name_,
         PG_NodeActions::node_action_,
         PG_NodeActions::reverse_,
         PG_NodeActions::targs_,
         PG_NodeActions::pargs_,
         PG_NodeActions::arg_integer_,
         PG_NodeActions::arg_alpha_
      };

//
////////////////////////////////////////////////////////////////////////////////////////////////////

