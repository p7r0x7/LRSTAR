
/*------------------------------------------------------------------
 * Copyright (c) 1996, 1997 Dmitri Bronnikov, All rights reserved.
 *
 * THIS GRAMMAR IS PROVIDED "AS IS" WITHOUT  ANY  EXPRESS  OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES  OF  MERCHANTABILITY  AND  FITNESS  FOR  A  PARTICULAR
 * PURPOSE, OR NON-INFRINGMENT.
 *
 * Bronikov@inreach.com
 *
 *------------------------------------------------------------------
 *
 * VERSION 1.03 DATE 11 NOV 1997
 *
 *------------------------------------------------------------------
 *
 * UPDATES
 *
 * 1.03 Added Java 1.1 changes:
 *      inner classes,
 *      anonymous classes,
 *      non-static initializer blocks,
 *      array initialization by new operator
 * 1.02 Corrected cast expression syntax
 * 1.01 All shift/reduce conflicts, except dangling else, resolved
 *
 *------------------------------------------------------------------
 *
 * PARSING CONFLICTS RESOLVED
 *
 * Some Shift/Reduce conflicts have been resolved at the expense of
 * the grammar defines a superset of the language. The following
 * actions have to be performed to complete program syntax checking:
 *
 * 1) Check that modifiers applied to a class, interface, field,
 *    or constructor are allowed in respectively a class, inteface,
 *    field or constructor declaration. For example, a class
 *    declaration should not allow other modifiers than abstract,
 *    final and public.
 *
 * 2) For an expression statement, check it is either increment, or
 *    decrement, or assignment expression.
 *
 * 3) Check that type expression in a cast operator indicates a type.
 *    Some of the compilers that I have tested will allow simultaneous
 *    use of identically named type and variable in the same scope
 *    depending on context.
 *
 * 4) Change lexical definition to change '[' optionally followed by
 *    any number of white-space characters immediately followed by ']'
 *    to OP_DIM token. I defined this token as [\[]{white_space}*[\]]
 *    in the lexer.
 *
 *------------------------------------------------------------------
 *
 * UNRESOLVED SHIFT/REDUCE CONFLICTS
 *
 * Dangling else in if-then-else
 *
 *------------------------------------------------------------------
 *
 * Converted from YACC to LRSTAR format by Paul Mann.
 *
 *------------------------------------------------------------------
 */

/* Terminal Symbols. */

   <error>          => error ;
   <identifier>     => lookup;
   <literal>        => lookup;

	BOOLEAN			'boolean';
	CHAR				'char';
	BYTE				'byte';
	SHORT				'short';
	INT				'int';
	LONG				'long';
	FLOAT				'float';
	DOUBLE			'double';
	VOID				'void';
	ENUM           'enum';
	PACKAGE			'package';
	IMPORT			'import';
	ABSTRACT			'abstract';
	FINAL				'final';
	PUBLIC			'public';
	PROTECTED		'protected';
	PRIVATE			'private';
	STATIC			'static';
	TRANSIENT		'transient';
	VOLATILE			'volatile';
	NATIVE			'native';
	SYNCHRONIZED	'synchronized';
	CLASS          'class';
	INTERFACE      'interface';
	IMPLEMENTS     'implements';
	OP_DIM         'op_dim';
	THROWS         'throws';
	EXTENDS        'extends';
	CASE           'case';
	DEFAULT        'default';
	IF             'if';
	ELSE           'else';
	SWITCH         'switch';
	WHILE          'while';
	DO             'do';
	FOR            'for';
	BREAK          'break';
	CONTINUE       'continue';
	RETURN         'return';
	THROW          'throw';
	TRY            'try';
	CATCH          'catch';
	FINALLY        'finally';
	THIS           'this';
	SUPER          'super';
	JNULL          'jnull';
	NEW            'new';
	INSTANCEOF     'instanceof';

/* Grammar Rules. */

   Goal 
   -> CompilationUnit <eof>

   TypeSpecifier
   -> TypeName                                          
   -> TypeName Dims                                     

   TypeName
   -> PrimitiveType                                     
   -> QualifiedName                                     

   ClassNameList
   -> QualifiedName                                     
   -> ClassNameList ',' QualifiedName                   

   PrimitiveType
   -> BOOLEAN                                           
   -> CHAR                                              
   -> BYTE                                              
   -> SHORT                                             
   -> INT                                               
   -> LONG                                              
   -> FLOAT                                             
   -> DOUBLE                                            
   -> VOID                                              

   CompilationUnit
   -> ProgramFile                                       

   ProgramFile
   -> PackageStatement ImportStatements TypeDeclarations 
   -> PackageStatement ImportStatements                 
   -> PackageStatement TypeDeclarations                 
   -> ImportStatements TypeDeclarations                 
   -> PackageStatement                                  
   -> ImportStatements                                  
   -> TypeDeclarations                                  

   PackageStatement
   -> PACKAGE QualifiedName ';'                         

   TypeDeclarations
   -> TypeDeclaration                                   
   -> TypeDeclarations TypeDeclaration                  

   ImportStatements
   -> ImportStatement                                   
   -> ImportStatements ImportStatement                  

   ImportStatement
   -> IMPORT STATIC? QualifiedName ';'                          
   -> IMPORT STATUC? QualifiedName '.' '*' ';'                  

   QualifiedName
   -> <identifier>                                        
   -> QualifiedName '.' <identifier>                      
   -> QualifiedName '.' '*'                      

   TypeDeclaration
   -> ClassHeader '{' FieldDeclarations '}'             
   -> ClassHeader '{' '}'                               

   ClassHeader
   -> Modifiers ClassWord <identifier> Extends Interfaces 
   -> Modifiers ClassWord <identifier> Extends            
   -> Modifiers ClassWord <identifier> Interfaces         
   -> ClassWord <identifier> Extends Interfaces           
   -> Modifiers ClassWord <identifier>                    
   -> ClassWord <identifier> Extends                      
   -> ClassWord <identifier> Interfaces                   
   -> ClassWord <identifier>                              

   Modifiers
   -> Modifier                                          
   -> Modifiers Modifier                                

   Modifier
   -> ABSTRACT                                          
   -> FINAL                                             
   -> PUBLIC                                            
   -> PROTECTED                                         
   -> PRIVATE                                           
   -> STATIC                                            
   -> TRANSIENT                                         
   -> VOLATILE                                          
   -> NATIVE                                            
   -> SYNCHRONIZED  
	-> ENUM

   ClassWord
   -> CLASS                                             
   -> INTERFACE                                         

   Interfaces
   -> IMPLEMENTS ClassNameList                          

   FieldDeclarations
   -> FieldDeclaration                                  
   -> FieldDeclarations FieldDeclaration                

   FieldDeclaration
   -> FieldVariableDeclaration ';'                      
   -> MethodDeclaration                                 
   -> ConstructorDeclaration                            
   -> StaticInitializer                                 
   -> NonStaticInitializer                              
   -> TypeDeclaration                                   

   FieldVariableDeclaration
   -> Modifiers TypeSpecifier VariableDeclarators       
   -> TypeSpecifier VariableDeclarators                 

   VariableDeclarators
   -> VariableDeclarator                                
   -> VariableDeclarators ',' VariableDeclarator        

   VariableDeclarator
   -> DeclaratorName                                    
   -> DeclaratorName '=' VariableInitializer            

   VariableInitializer
   -> Expression                                        
   -> '{' '}'                                           
   -> '{' ArrayInitializers '}'                         

   ArrayInitializers
   -> VariableInitializer                               
   -> ArrayInitializers ',' VariableInitializer         
   -> ArrayInitializers ','                             

   MethodDeclaration
   -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody 
   -> Modifiers TypeSpecifier MethodDeclarator MethodBody 
   -> TypeSpecifier MethodDeclarator Throws MethodBody  
   -> TypeSpecifier MethodDeclarator MethodBody         

   MethodDeclarator
   -> DeclaratorName '(' ParameterList ')'              
   -> DeclaratorName '(' ')'                            
   -> MethodDeclarator OP_DIM                           

   ParameterList
   -> Parameter                                         
   -> ParameterList ',' Parameter                       

   Parameter
   -> TypeSpecifier DeclaratorName                      

   DeclaratorName
   -> <identifier>                                        
   -> DeclaratorName OP_DIM                             

   Throws
   -> THROWS ClassNameList                              

   MethodBody
   -> Block                                             
   -> ';'                                               

   ConstructorDeclaration
   -> Modifiers ConstructorDeclarator Throws Block      
   -> Modifiers ConstructorDeclarator Block             
   -> ConstructorDeclarator Throws Block                
   -> ConstructorDeclarator Block                       

   ConstructorDeclarator
   -> <identifier> '(' ParameterList ')'                  
   -> <identifier> '(' ')'                                

   StaticInitializer
   -> STATIC Block                                      

   NonStaticInitializer
   -> Block                                             

   Extends
   -> EXTENDS TypeName                                  
   -> Extends ',' TypeName                              

   Block
   -> '{' LocalVariableDeclarationsAndStatements '}'    
   -> '{' '}'                                           

   LocalVariableDeclarationsAndStatements
   -> LocalVariableDeclarationOrStatement               
   -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement 

   LocalVariableDeclarationOrStatement
   -> LocalVariableDeclarationStatement                 
   -> Statement                                         

   LocalVariableDeclarationStatement
   -> TypeSpecifier VariableDeclarators ';'             

   Statement
   -> EmptyStatement                                    
   -> LabeledStatement                                  
   -> ExpressionStatement ';'                           
   -> SelectionStatement                                
   -> IterationStatement                                
   -> JumpStatement                                     
   -> GuardingStatement                                 
   -> Block                                             

   EmptyStatement
   -> ';'                                               

   LabeledStatement
   -> <identifier> ':' LocalVariableDeclarationOrStatement 
   -> CASE ConstantExpression ':' LocalVariableDeclarationOrStatement 
   -> DEFAULT ':' LocalVariableDeclarationOrStatement   

   ExpressionStatement
   -> Expression                                        

   SelectionStatement
   -> IF '(' Expression ')' Statement                   
   -> IF '(' Expression ')' Statement ELSE Statement    
   -> SWITCH '(' Expression ')' Block                   

   IterationStatement
   -> WHILE '(' Expression ')' Statement                
   -> DO Statement WHILE '(' Expression ')' ';'         
   -> FOR '(' ForInit ForExpr ForIncr ')' Statement     
   -> FOR '(' ForInit ForExpr ')' Statement             

   ForInit
   -> ExpressionStatements ';'                          
   -> LocalVariableDeclarationStatement                 
   -> ';'                                               

   ForExpr
   -> Expression ';'                                    
   -> ';'                                               

   ForIncr
   -> ExpressionStatements                              

   ExpressionStatements
   -> ExpressionStatement                               
   -> ExpressionStatements ',' ExpressionStatement      

   JumpStatement
   -> BREAK <identifier> ';'                              
   -> BREAK ';'                                         
   -> CONTINUE <identifier> ';'                           
   -> CONTINUE ';'                                      
   -> RETURN Expression ';'                             
   -> RETURN ';'                                        
   -> THROW Expression ';'                              

   GuardingStatement
   -> SYNCHRONIZED '(' Expression ')' Statement         
   -> TRY Block Finally                                 
   -> TRY Block Catches                                 
   -> TRY Block Catches Finally                         

   Catches
   -> Catch                                             
   -> Catches Catch                                     

   Catch
   -> CatchHeader Block                                 

   CatchHeader
   -> CATCH '(' TypeSpecifier <identifier> ')'            
   -> CATCH '(' TypeSpecifier ')'                       

   Finally
   -> FINALLY Block                                     

   PrimaryExpression
   -> QualifiedName                                     
   -> NotJustName                                       

   NotJustName
   -> SpecialName                                       
   -> NewAllocationExpression                           
   -> ComplexPrimary                                    

   ComplexPrimary
   -> '(' Expression ')'                                
   -> ComplexPrimaryNoParenthesis                       

   ComplexPrimaryNoParenthesis
   -> <literal>                                           
   -> ArrayAccess                                       
   -> FieldAccess                                       
   -> MethodCall                                        

   ArrayAccess
   -> QualifiedName '[' Expression ']'                  
   -> ComplexPrimary '[' Expression ']'                 

   FieldAccess
   -> NotJustName '.' <identifier>                        
   -> RealPostfixExpression '.' <identifier>              

   MethodCall
   -> MethodAccess '(' ArgumentList ')'                 
   -> MethodAccess '(' ')'                              

   MethodAccess
   -> ComplexPrimaryNoParenthesis                       
   -> SpecialName                                       
   -> QualifiedName                                     

   SpecialName
   -> THIS                                              
   -> SUPER                                             
   -> JNULL                                             

   ArgumentList
   -> Expression                                        
   -> ArgumentList ',' Expression                       

   NewAllocationExpression
   -> ArrayAllocationExpression                         
   -> ClassAllocationExpression                         
   -> ArrayAllocationExpression '{' '}'                 
   -> ClassAllocationExpression '{' '}'                 
   -> ArrayAllocationExpression '{' ArrayInitializers '}' 
   -> ClassAllocationExpression '{' FieldDeclarations '}' 

   ClassAllocationExpression
   -> NEW TypeName '(' ArgumentList ')'                 
   -> NEW TypeName '(' ')'                              

   ArrayAllocationExpression
   -> NEW TypeName DimExprs Dims                        
   -> NEW TypeName DimExprs                             

   DimExprs
   -> DimExpr                                           
   -> DimExprs DimExpr                                  

   DimExpr
   -> '[' Expression ']'                                

   Dims
   -> OP_DIM                                            
   -> Dims OP_DIM                                       

   PostfixExpression
   -> PrimaryExpression                                 
   -> RealPostfixExpression                             

   RealPostfixExpression
   -> PostfixExpression '++'
   -> PostfixExpression '--'

   UnaryExpression
   -> '++' UnaryExpression                            
   -> '--' UnaryExpression                            
   -> ArithmeticUnaryOperator CastExpression            
   -> LogicalUnaryExpression                            

   LogicalUnaryExpression
   -> PostfixExpression                                 
   -> LogicalUnaryOperator UnaryExpression              

   LogicalUnaryOperator
   -> '~'                                               
   -> '!'                                               

   ArithmeticUnaryOperator
   -> '+'                                               
   -> '-'                                               

   CastExpression
   -> UnaryExpression                                   
   -> '(' PrimitiveTypeExpression ')' CastExpression    
   -> '(' ClassTypeExpression ')' CastExpression        
   -> '(' Expression ')' LogicalUnaryExpression         

   PrimitiveTypeExpression
   -> PrimitiveType                                     
   -> PrimitiveType Dims                                

   ClassTypeExpression
   -> QualifiedName Dims                                

   MultiplicativeExpression
   -> CastExpression                                    
   -> MultiplicativeExpression '*' CastExpression       
   -> MultiplicativeExpression '/' CastExpression       
   -> MultiplicativeExpression '%' CastExpression       

   AdditiveExpression
   -> MultiplicativeExpression                          
   -> AdditiveExpression '+' MultiplicativeExpression   
   -> AdditiveExpression '-' MultiplicativeExpression   

   ShiftExpression
   -> AdditiveExpression                                
   -> ShiftExpression '<<' AdditiveExpression         
   -> ShiftExpression '>>' AdditiveExpression         
   -> ShiftExpression '>>>' AdditiveExpression         

   RelationalExpression
   -> ShiftExpression                                   
   -> RelationalExpression '<' ShiftExpression          
   -> RelationalExpression '>' ShiftExpression          
   -> RelationalExpression '<=' ShiftExpression        
   -> RelationalExpression '>=' ShiftExpression        
   -> RelationalExpression INSTANCEOF TypeSpecifier     

   EqualityExpression
   -> RelationalExpression                              
   -> EqualityExpression '==' RelationalExpression     
   -> EqualityExpression '!=' RelationalExpression     

   AndExpression
   -> EqualityExpression                                
   -> AndExpression '&' EqualityExpression              

   ExclusiveOrExpression
   -> AndExpression                                     
   -> ExclusiveOrExpression '^' AndExpression           

   InclusiveOrExpression
   -> ExclusiveOrExpression                             
   -> InclusiveOrExpression '|' ExclusiveOrExpression   

   ConditionalAndExpression
   -> InclusiveOrExpression                             
   -> ConditionalAndExpression '&&' InclusiveOrExpression 

   ConditionalOrExpression
   -> ConditionalAndExpression                          
   -> ConditionalOrExpression '||' ConditionalAndExpression 

   ConditionalExpression
   -> ConditionalOrExpression                           
   -> ConditionalOrExpression '?' Expression ':' ConditionalExpression 

   AssignmentExpression
   -> ConditionalExpression                             
   -> UnaryExpression AssignmentOperator AssignmentExpression 

   AssignmentOperator
   -> '='                                               
   -> '*='
   -> '/='
   -> '%='
   -> '+='
   -> '-='
   -> '<<='
   -> '>>='
   -> '>>>='
   -> '&='
   -> '^='
   -> '|='

   Expression
   -> AssignmentExpression                              

   ConstantExpression
   -> ConditionalExpression                             

/* End of Grammar. */

